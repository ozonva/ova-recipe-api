// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OvaRecipeApiClient is the client API for OvaRecipeApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OvaRecipeApiClient interface {
	CreateRecipeV1(ctx context.Context, in *CreateRecipeRequestV1, opts ...grpc.CallOption) (*CreateRecipeResponseV1, error)
	MultiCreateRecipeV1(ctx context.Context, in *MultiCreateRecipeRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DescribeRecipeV1(ctx context.Context, in *DescribeRecipeRequestV1, opts ...grpc.CallOption) (*DescribeRecipeResponseV1, error)
	ListRecipesV1(ctx context.Context, in *ListRecipesRequestV1, opts ...grpc.CallOption) (*ListRecipesResponseV1, error)
	RemoveRecipeV1(ctx context.Context, in *RemoveRecipeRequestV1, opts ...grpc.CallOption) (*RemoveRecipesResponseV1, error)
}

type ovaRecipeApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOvaRecipeApiClient(cc grpc.ClientConnInterface) OvaRecipeApiClient {
	return &ovaRecipeApiClient{cc}
}

func (c *ovaRecipeApiClient) CreateRecipeV1(ctx context.Context, in *CreateRecipeRequestV1, opts ...grpc.CallOption) (*CreateRecipeResponseV1, error) {
	out := new(CreateRecipeResponseV1)
	err := c.cc.Invoke(ctx, "/ova.recipe.api.OvaRecipeApi/CreateRecipeV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovaRecipeApiClient) MultiCreateRecipeV1(ctx context.Context, in *MultiCreateRecipeRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ova.recipe.api.OvaRecipeApi/MultiCreateRecipeV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovaRecipeApiClient) DescribeRecipeV1(ctx context.Context, in *DescribeRecipeRequestV1, opts ...grpc.CallOption) (*DescribeRecipeResponseV1, error) {
	out := new(DescribeRecipeResponseV1)
	err := c.cc.Invoke(ctx, "/ova.recipe.api.OvaRecipeApi/DescribeRecipeV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovaRecipeApiClient) ListRecipesV1(ctx context.Context, in *ListRecipesRequestV1, opts ...grpc.CallOption) (*ListRecipesResponseV1, error) {
	out := new(ListRecipesResponseV1)
	err := c.cc.Invoke(ctx, "/ova.recipe.api.OvaRecipeApi/ListRecipesV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovaRecipeApiClient) RemoveRecipeV1(ctx context.Context, in *RemoveRecipeRequestV1, opts ...grpc.CallOption) (*RemoveRecipesResponseV1, error) {
	out := new(RemoveRecipesResponseV1)
	err := c.cc.Invoke(ctx, "/ova.recipe.api.OvaRecipeApi/RemoveRecipeV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OvaRecipeApiServer is the server API for OvaRecipeApi service.
// All implementations must embed UnimplementedOvaRecipeApiServer
// for forward compatibility
type OvaRecipeApiServer interface {
	CreateRecipeV1(context.Context, *CreateRecipeRequestV1) (*CreateRecipeResponseV1, error)
	MultiCreateRecipeV1(context.Context, *MultiCreateRecipeRequestV1) (*emptypb.Empty, error)
	DescribeRecipeV1(context.Context, *DescribeRecipeRequestV1) (*DescribeRecipeResponseV1, error)
	ListRecipesV1(context.Context, *ListRecipesRequestV1) (*ListRecipesResponseV1, error)
	RemoveRecipeV1(context.Context, *RemoveRecipeRequestV1) (*RemoveRecipesResponseV1, error)
	mustEmbedUnimplementedOvaRecipeApiServer()
}

// UnimplementedOvaRecipeApiServer must be embedded to have forward compatible implementations.
type UnimplementedOvaRecipeApiServer struct {
}

func (UnimplementedOvaRecipeApiServer) CreateRecipeV1(context.Context, *CreateRecipeRequestV1) (*CreateRecipeResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipeV1 not implemented")
}
func (UnimplementedOvaRecipeApiServer) MultiCreateRecipeV1(context.Context, *MultiCreateRecipeRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateRecipeV1 not implemented")
}
func (UnimplementedOvaRecipeApiServer) DescribeRecipeV1(context.Context, *DescribeRecipeRequestV1) (*DescribeRecipeResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeRecipeV1 not implemented")
}
func (UnimplementedOvaRecipeApiServer) ListRecipesV1(context.Context, *ListRecipesRequestV1) (*ListRecipesResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecipesV1 not implemented")
}
func (UnimplementedOvaRecipeApiServer) RemoveRecipeV1(context.Context, *RemoveRecipeRequestV1) (*RemoveRecipesResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRecipeV1 not implemented")
}
func (UnimplementedOvaRecipeApiServer) mustEmbedUnimplementedOvaRecipeApiServer() {}

// UnsafeOvaRecipeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OvaRecipeApiServer will
// result in compilation errors.
type UnsafeOvaRecipeApiServer interface {
	mustEmbedUnimplementedOvaRecipeApiServer()
}

func RegisterOvaRecipeApiServer(s grpc.ServiceRegistrar, srv OvaRecipeApiServer) {
	s.RegisterService(&OvaRecipeApi_ServiceDesc, srv)
}

func _OvaRecipeApi_CreateRecipeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecipeRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvaRecipeApiServer).CreateRecipeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.recipe.api.OvaRecipeApi/CreateRecipeV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvaRecipeApiServer).CreateRecipeV1(ctx, req.(*CreateRecipeRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvaRecipeApi_MultiCreateRecipeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateRecipeRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvaRecipeApiServer).MultiCreateRecipeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.recipe.api.OvaRecipeApi/MultiCreateRecipeV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvaRecipeApiServer).MultiCreateRecipeV1(ctx, req.(*MultiCreateRecipeRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvaRecipeApi_DescribeRecipeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRecipeRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvaRecipeApiServer).DescribeRecipeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.recipe.api.OvaRecipeApi/DescribeRecipeV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvaRecipeApiServer).DescribeRecipeV1(ctx, req.(*DescribeRecipeRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvaRecipeApi_ListRecipesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecipesRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvaRecipeApiServer).ListRecipesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.recipe.api.OvaRecipeApi/ListRecipesV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvaRecipeApiServer).ListRecipesV1(ctx, req.(*ListRecipesRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvaRecipeApi_RemoveRecipeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRecipeRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvaRecipeApiServer).RemoveRecipeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.recipe.api.OvaRecipeApi/RemoveRecipeV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvaRecipeApiServer).RemoveRecipeV1(ctx, req.(*RemoveRecipeRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// OvaRecipeApi_ServiceDesc is the grpc.ServiceDesc for OvaRecipeApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OvaRecipeApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ova.recipe.api.OvaRecipeApi",
	HandlerType: (*OvaRecipeApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecipeV1",
			Handler:    _OvaRecipeApi_CreateRecipeV1_Handler,
		},
		{
			MethodName: "MultiCreateRecipeV1",
			Handler:    _OvaRecipeApi_MultiCreateRecipeV1_Handler,
		},
		{
			MethodName: "DescribeRecipeV1",
			Handler:    _OvaRecipeApi_DescribeRecipeV1_Handler,
		},
		{
			MethodName: "ListRecipesV1",
			Handler:    _OvaRecipeApi_ListRecipesV1_Handler,
		},
		{
			MethodName: "RemoveRecipeV1",
			Handler:    _OvaRecipeApi_RemoveRecipeV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
