// Code generated by MockGen. DO NOT EDIT.
// Source: ova-recipe-api/internal/api (interfaces: Metrics)

// Package api is a generated GoMock package.
package api

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// incFailCreateRecipeCounter mocks base method.
func (m *MockMetrics) incFailCreateRecipeCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "incFailCreateRecipeCounter")
}

// incFailCreateRecipeCounter indicates an expected call of incFailCreateRecipeCounter.
func (mr *MockMetricsMockRecorder) incFailCreateRecipeCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "incFailCreateRecipeCounter", reflect.TypeOf((*MockMetrics)(nil).incFailCreateRecipeCounter))
}

// incFailRemoveRecipeCounter mocks base method.
func (m *MockMetrics) incFailRemoveRecipeCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "incFailRemoveRecipeCounter")
}

// incFailRemoveRecipeCounter indicates an expected call of incFailRemoveRecipeCounter.
func (mr *MockMetricsMockRecorder) incFailRemoveRecipeCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "incFailRemoveRecipeCounter", reflect.TypeOf((*MockMetrics)(nil).incFailRemoveRecipeCounter))
}

// incFailUpdateRecipeCounter mocks base method.
func (m *MockMetrics) incFailUpdateRecipeCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "incFailUpdateRecipeCounter")
}

// incFailUpdateRecipeCounter indicates an expected call of incFailUpdateRecipeCounter.
func (mr *MockMetricsMockRecorder) incFailUpdateRecipeCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "incFailUpdateRecipeCounter", reflect.TypeOf((*MockMetrics)(nil).incFailUpdateRecipeCounter))
}

// incSuccessCreateRecipeCounter mocks base method.
func (m *MockMetrics) incSuccessCreateRecipeCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "incSuccessCreateRecipeCounter")
}

// incSuccessCreateRecipeCounter indicates an expected call of incSuccessCreateRecipeCounter.
func (mr *MockMetricsMockRecorder) incSuccessCreateRecipeCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "incSuccessCreateRecipeCounter", reflect.TypeOf((*MockMetrics)(nil).incSuccessCreateRecipeCounter))
}

// incSuccessRemoveRecipeCounter mocks base method.
func (m *MockMetrics) incSuccessRemoveRecipeCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "incSuccessRemoveRecipeCounter")
}

// incSuccessRemoveRecipeCounter indicates an expected call of incSuccessRemoveRecipeCounter.
func (mr *MockMetricsMockRecorder) incSuccessRemoveRecipeCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "incSuccessRemoveRecipeCounter", reflect.TypeOf((*MockMetrics)(nil).incSuccessRemoveRecipeCounter))
}

// incSuccessUpdateRecipeCounter mocks base method.
func (m *MockMetrics) incSuccessUpdateRecipeCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "incSuccessUpdateRecipeCounter")
}

// incSuccessUpdateRecipeCounter indicates an expected call of incSuccessUpdateRecipeCounter.
func (mr *MockMetricsMockRecorder) incSuccessUpdateRecipeCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "incSuccessUpdateRecipeCounter", reflect.TypeOf((*MockMetrics)(nil).incSuccessUpdateRecipeCounter))
}
