// Code generated by MockGen. DO NOT EDIT.
// Source: ova-recipe-api/internal/recipe (interfaces: Action)

// Package recipe is a generated GoMock package.
package recipe

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAction is a mock of Action interface.
type MockAction struct {
	ctrl     *gomock.Controller
	recorder *MockActionMockRecorder
}

// MockActionMockRecorder is the mock recorder for MockAction.
type MockActionMockRecorder struct {
	mock *MockAction
}

// NewMockAction creates a new mock instance.
func NewMockAction(ctrl *gomock.Controller) *MockAction {
	mock := &MockAction{ctrl: ctrl}
	mock.recorder = &MockActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAction) EXPECT() *MockActionMockRecorder {
	return m.recorder
}

// DoAction mocks base method.
func (m *MockAction) DoAction() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoAction")
	ret0, _ := ret[0].(error)
	return ret0
}

// DoAction indicates an expected call of DoAction.
func (mr *MockActionMockRecorder) DoAction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoAction", reflect.TypeOf((*MockAction)(nil).DoAction))
}

// String mocks base method.
func (m *MockAction) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockActionMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockAction)(nil).String))
}
